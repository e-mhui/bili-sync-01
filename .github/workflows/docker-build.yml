name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: qq1582185982/bili-sync

jobs:
  build-binaries:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            archive_name: bili-sync-rs-Linux-x86_64-musl.tar.gz
          - target: aarch64-unknown-linux-musl
            archive_name: bili-sync-rs-Linux-aarch64-musl.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd web
        npm ci

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross for ARM64
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Install musl tools for x86_64
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Build binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          cross build --release --target ${{ matrix.target }} -p bili_sync
        else
          cargo build --release --target ${{ matrix.target }} -p bili_sync
        fi

    - name: Create release archive
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/bili-sync-rs release/bili-sync-rs
        cd release
        tar -czf ${{ matrix.archive_name }} bili-sync-rs

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: release/${{ matrix.archive_name }}

  build-and-push:
    name: Build and Push Docker Image
    needs: build-binaries
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare Docker context
      run: |
        cp artifacts/bili-sync-rs-Linux-x86_64-musl.tar.gz/bili-sync-rs-Linux-x86_64-musl.tar.gz .
        cp artifacts/bili-sync-rs-Linux-aarch64-musl.tar.gz/bili-sync-rs-Linux-aarch64-musl.tar.gz .

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.IMAGE_NAME }}:main
          ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
