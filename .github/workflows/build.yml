name: Build bili-sync

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      # 设置CI环境变量，让build脚本知道这是CI环境
      CI: true
      GITHUB_ACTIONS: true
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: Windows-x86_64
            extension: .exe
            archive: zip
            archive_name: bili-sync-rs-Windows-x86_64.zip
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: Linux-x86_64-musl
            extension: ""
            archive: tar.gz
            archive_name: bili-sync-rs-Linux-x86_64-musl.tar.gz
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: Linux-aarch64-musl
            extension: ""
            archive: tar.gz
            archive_name: bili-sync-rs-Linux-aarch64-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macos-13  # 使用 Intel 架构的 macOS 13
            name: Darwin-x86_64
            extension: ""
            archive: tar.gz
            archive_name: bili-sync-rs-Darwin-x86_64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest  # ARM64 架构的 macOS 14
            name: Darwin-aarch64
            extension: ""
            archive: tar.gz
            archive_name: bili-sync-rs-Darwin-aarch64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: |
        cd web
        npm install

    - name: Build frontend
      run: |
        cd web
        npm run build

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install cross (for Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Install musl tools (for Linux x86_64)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    # 安装aria2用于构建集成
    - name: Install aria2 (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y aria2

    - name: Install aria2 (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install aria2

    - name: Build binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          cross build --release --target ${{ matrix.target }} -p bili_sync
        else
          cargo build --release --target ${{ matrix.target }} -p bili_sync
        fi
      shell: bash

    - name: Prepare binary
      run: |
        mkdir -p release
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/bili-sync-rs${{ matrix.extension }} release/bili-sync-rs${{ matrix.extension }}
        else
          cp target/${{ matrix.target }}/release/bili-sync-rs release/bili-sync-rs
        fi
      shell: bash

    - name: Create release archive
      run: |
        cd release
        if [ "${{ matrix.archive }}" = "zip" ]; then
          7z a ${{ matrix.archive_name }} bili-sync-rs${{ matrix.extension }}
        else
          tar -czf ${{ matrix.archive_name }} bili-sync-rs
        fi
      shell: bash

    # 检查aria2集成状态
    - name: Verify aria2 integration
      run: |
        echo "Checking binary size (should include embedded aria2):"
        if [ "${{ runner.os }}" = "Windows" ]; then
          ls -lh target/${{ matrix.target }}/release/bili-sync-rs${{ matrix.extension }}
        else
          ls -lh target/${{ matrix.target }}/release/bili-sync-rs
        fi
        echo "Testing binary execution (only for native targets):"
        # 只在本地架构匹配时执行二进制测试
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ] || 
           [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ] || 
           [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
          if [ "${{ runner.os }}" = "Windows" ]; then
            target/${{ matrix.target }}/release/bili-sync-rs${{ matrix.extension }} --help | head -5
          else
            target/${{ matrix.target }}/release/bili-sync-rs --help | head -5
          fi
        else
          echo "Skipping binary execution test for cross-compiled target ${{ matrix.target }}"
        fi
      shell: bash

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: release/${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 检查所有平台的aria2集成状态
  check-aria2-integration:
    name: Check aria2 integration
    runs-on: ubuntu-latest
    needs: build
    if: always()  # 即使某些构建失败也要运行检查
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      
    - name: Check binary sizes and aria2 embedding
      run: |
        echo "=== Binary sizes with embedded aria2 ==="
        find . -name "*.zip" -o -name "*.tar.gz" | while read archive; do
          echo "Archive: $archive"
          if [[ "$archive" == *.zip ]]; then
            unzip -l "$archive" | grep bili-sync-rs
          else
            tar -tzf "$archive" | grep bili-sync-rs | xargs tar -tzf "$archive" --verbose
          fi
          echo "---"
        done
        
        echo "=== Extracting and testing binaries ==="
        # 解压Windows版本测试
        if [ -f "./bili-sync-rs-Windows-x86_64.zip/bili-sync-rs-Windows-x86_64.zip" ]; then
          echo "Found Windows binary archive"
          unzip -q "./bili-sync-rs-Windows-x86_64.zip/bili-sync-rs-Windows-x86_64.zip"
          ls -lh bili-sync-rs.exe 2>/dev/null || echo "Windows binary not found"
        fi
        
        # 解压Linux版本测试
        if [ -f "./bili-sync-rs-Linux-x86_64-musl.tar.gz/bili-sync-rs-Linux-x86_64-musl.tar.gz" ]; then
          echo "Found Linux binary archive"
          tar -xzf "./bili-sync-rs-Linux-x86_64-musl.tar.gz/bili-sync-rs-Linux-x86_64-musl.tar.gz"
          ls -lh bili-sync-rs 2>/dev/null || echo "Linux binary not found"
          if [ -f "./bili-sync-rs" ]; then
            echo "Testing Linux binary:"
            file ./bili-sync-rs
            chmod +x ./bili-sync-rs
            ./bili-sync-rs --help | head -3 || echo "Binary execution failed"
          fi
        fi 